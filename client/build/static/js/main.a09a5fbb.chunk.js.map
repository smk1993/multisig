{"version":3,"sources":["utils.js","Header.js","NewTransfer.js","TransferList.js","App.js","index.js"],"names":["getWallet","web3","a","eth","net","getId","networkId","deployedNetwork","Wallet","networks","Contract","abi","address","Header","approvers","quorum","join","NewTransfer","createTransfer","useState","undefined","transfer","setTransfer","updateTransfer","e","field","value","target","onSubmit","preventDefault","submit","htmlFor","id","type","onChange","TransferList","transfers","approveTransfer","map","key","amount","to","approvals","onClick","sent","App","setWeb3","accounts","setAccounts","wallet","setWallet","setApprovers","setQuorum","setTransfers","useEffect","Promise","resolve","reject","window","addEventListener","ethereum","Web3","enable","console","log","provider","providers","HttpProvider","getAccounts","methods","getApprovers","call","getTransfers","init","length","send","from","gas","transferId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a09a5fbb.chunk.js","sourcesContent":["import Web3 from 'web3';\nimport Wallet from './contracts/Wallet.json';\n\nconst getWeb3 = () => {\n  return new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://localhost:9545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n};\nconst getWallet = async web3 => {\n  const networkId = await web3.eth.net.getId();\n  const deployedNetwork = Wallet.networks[networkId];\n  return new web3.eth.Contract(\n    Wallet.abi,\n    deployedNetwork && deployedNetwork.address,\n  );\n}\n\nexport { getWeb3, getWallet };","import React from 'react'\n\n function Header({approvers, quorum}) {\n    return (\n   <header>\n       <ul>\n           <li> Approvers :{approvers.join(',')} </li>\n           <li>Quorom : {quorum}</li>\n       </ul>\n   </header>\n    )\n}\n\n\nexport default Header","import React, { useState } from 'react';\n\nfunction NewTransfer({createTransfer}) {\n  const [transfer, setTransfer] = useState(undefined);\n\n  const submit = e => {\n    e.preventDefault();\n    createTransfer(transfer);\n  }\n\n  const updateTransfer = (e, field) => {\n    const value = e.target.value;\n    setTransfer({...transfer, [field]: value});\n  }\n\n  return (\n    <div>\n      <h2>Create transfer</h2>\n      <form onSubmit={e => submit(e)}>\n        <label htmlFor=\"amount\">Amount</label>\n        <input \n          id=\"amount\"\n          type=\"text\" \n          onChange={e => updateTransfer(e, 'amount')} \n        />\n        <label htmlFor=\"to\">To</label>\n        <input \n          id=\"to\"\n          type=\"text\" \n          onChange={e => updateTransfer(e, 'to')} \n        />\n        <button>Submit</button>\n      </form>\n    </div>\n  );\n}\n\nexport default NewTransfer;","import React from 'react';\n\nfunction TransferList({transfers, approveTransfer}) {\n  return (\n    <div>\n      <h2>Transfers</h2>\n      <table>\n        <thead>\n          <tr>\n            <th>id</th>\n            <th>amount</th>\n            <th>to</th>\n            <th>approvals</th>\n            <th>sent</th>\n          </tr>\n        </thead>\n        <tbody>\n          {transfers.map((transfer) => (\n            <tr key={transfer.id}>\n              <td>{transfer.id}</td>\n              <td>{transfer.amount}</td>\n              <td>{transfer.to}</td>\n              <td>\n                {transfer.approvals} \n                <button onClick={() => approveTransfer(transfer.id)}>Approve</button>\n              </td>\n              <td>{transfer.sent ? 'yes' : 'no'}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default TransferList;","import React, { useEffect, useState } from 'react';\nimport { getWeb3, getWallet } from './utils.js'; \nimport Header from './Header.js';\nimport NewTransfer from './NewTransfer.js';\nimport TransferList from './TransferList.js';\n\nfunction App() {\n  const [web3, setWeb3] = useState(undefined);\n  const [accounts, setAccounts] = useState(undefined);\n  const [wallet, setWallet] = useState(undefined);\n  const [approvers, setApprovers] = useState([]);\n  const [quorum, setQuorum] = useState(undefined);\n  const [transfers, setTransfers] = useState([]);\n\n  useEffect(() => {\n    const init = async () => {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const wallet = await getWallet(web3);\n      const approvers = await wallet.methods.getApprovers().call();\n      const quorum = await wallet.methods.quorum().call();\n      const transfers = await wallet.methods.getTransfers().call();\n      console.log(quorum)\n      setWeb3(web3);\n      setAccounts(accounts);\n      setWallet(wallet);\n      setApprovers(approvers);\n      setQuorum(quorum);\n      setTransfers(transfers);\n    };\n    init();\n  }, []);\n\n\n  const createTransfer = transfer => {\n    wallet.methods\n      .createTransfer(transfer.amount, transfer.to)\n      .send({from: accounts[0], gas: 1000000});\n  }\n  const approveTransfer = transferId => {\n    wallet.methods\n      .approveTransfer(transferId)\n      .send({from: accounts[0], gas: 1000000});\n  }\n  if(\n    typeof web3 === 'undefined'\n    || typeof accounts === 'undefined'\n    || typeof wallet === 'undefined'\n    || approvers.length === 0\n    || typeof quorum === 'undefined'\n  ) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      Multisig Dapp \n      <Header approvers={approvers} quorum={quorum}/>\n      <NewTransfer createTransfer={createTransfer} />\n      <TransferList transfers={transfers} approveTransfer={approveTransfer} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}